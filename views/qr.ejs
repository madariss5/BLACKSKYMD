<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BLACKSKY-MD WhatsApp QR Scanner</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background-color: #f0f0f0;
            padding: 20px;
            color: #333;
        }
        h1 {
            color: #128C7E;
        }
        .container {
            max-width: 500px;
            margin: 0 auto;
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        #qrcode {
            padding: 20px;
            background-color: white;
            display: inline-block;
            margin: 20px 0;
        }
        .status {
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
            font-weight: bold;
        }
        .connected {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .disconnected {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .waiting {
            background-color: #fff3cd;
            color: #856404;
            border: 1px solid #ffeeba;
        }
        .instructions {
            text-align: left;
            margin: 20px 0;
            padding: 15px;
            background-color: #e7f3fe;
            border-left: 5px solid #2196F3;
            border-radius: 3px;
        }
        .info {
            font-size: 0.9em;
            color: #666;
            margin-top: 30px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>BLACKSKY-MD WhatsApp</h1>

        <div id="statusContainer">
            <div class="status waiting" id="status">Waiting for QR Code...</div>
        </div>

        <div id="qrcontainer">
            <div id="qrcode"></div>
        </div>

        <div class="instructions">
            <h3>How to connect:</h3>
            <ol>
                <li>Open WhatsApp on your phone</li>
                <li>Tap Menu or Settings and select Linked Devices</li>
                <li>Tap on "Link a Device"</li>
                <li>Point your phone to this screen to scan the QR code</li>
            </ol>
        </div>

        <div class="info">
            <p>This connection is secure and uses WhatsApp's official multi-device API.</p>
            <p>The QR code refreshes automatically when needed. Keep this page open.</p>
            <p><small>BLACKSKY-MD v1.0.0</small></p>
        </div>
    </div>

    <script>
        function connectWebSocket() {
            const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${wsProtocol}//${window.location.host}`;

            const socket = new WebSocket(wsUrl);
            const qrElement = document.getElementById('qrcode');
            const statusElement = document.getElementById('status');

            socket.onmessage = function(event) {
                const data = JSON.parse(event.data);

                if (data.type === 'qr') {
                    qrElement.innerHTML = data.qr;
                    statusElement.className = 'status waiting';
                    statusElement.innerText = 'Scan this QR code with WhatsApp';
                } else if (data.type === 'connection') {
                    if (data.connected) {
                        qrElement.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="200" height="200" viewBox="0 0 200 200"><circle cx="100" cy="100" r="90" fill="#4CAF50" /><path d="M83.5 136.5l-42-42 12-12 30 30 63-63 12 12z" fill="white" /></svg>';
                        statusElement.className = 'status connected';
                        statusElement.innerText = 'Connected Successfully!';
                    } else {
                        statusElement.className = 'status disconnected';
                        statusElement.innerText = 'Disconnected: ' + (data.reason || 'Unknown reason');
                        // Try to reconnect after a short delay
                        setTimeout(connectWebSocket, 5000);
                    }
                } else if (data.type === 'status') {
                    statusElement.innerText = data.message;
                }
            };

            socket.onclose = function() {
                statusElement.className = 'status disconnected';
                statusElement.innerText = 'Server connection lost. Reconnecting...';
                // Try to reconnect after a short delay
                setTimeout(connectWebSocket, 5000);
            };

            socket.onerror = function(error) {
                console.error('WebSocket error:', error);
                statusElement.className = 'status disconnected';
                statusElement.innerText = 'Connection error. Retrying...';
            };
        }

        // Start WebSocket connection
        connectWebSocket();

        // Reconnect when the page becomes visible again
        document.addEventListener('visibilitychange', () => {
            if (document.visibilityState === 'visible') {
                connectWebSocket();
            }
        });
    </script>
</body>
</html>